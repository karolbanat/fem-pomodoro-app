@use '../abstracts/variables';
@use '../abstracts/mixins';

:root {
	/* colours */
	@each $colour, $shades in variables.$colours {
		@each $shade, $value in $shades {
			--clr-#{$colour}-#{$shade}: #{$value};
		}
	}

	/* font families */
	--ff-default: 'Kumbh Sans', sans-serif;

	/* themes */
	@each $theme, $properties in variables.$themes {
		@each $property, $value in $properties {
			--#{$property}-theme-#{$theme}: #{$value};
		}
	}

	/* font weights */
	@each $font-weight, $value in variables.$font-weights {
		--fw-#{$font-weight}: #{$value};
	}

	/* font sizes */
	@each $screen, $sizes in variables.$font-sizes {
		@if $screen == small {
			@each $size, $value in $sizes {
				--fz-#{$size}: #{$value};
			}
		} @else {
			@include mixins.media-query($screen) {
				@each $size, $value in $sizes {
					--fz-#{$size}: #{$value};
				}
			}
		}
	}

	/* letter spacings */
	@each $letter-spacing, $value in variables.$letter-spacings {
		--ls-#{$letter-spacing}: #{$value};
	}

	/* border radius */
	@each $screen, $radiuses in variables.$border-radius {
		@if $screen == small {
			@each $radius, $value in $radiuses {
				--borr-#{$radius}: #{$value};
			}
		} @else {
			@include mixins.media-query($screen) {
				@each $radius, $value in $radiuses {
					--borr-#{$radius}: #{$value};
				}
			}
		}
	}
}
