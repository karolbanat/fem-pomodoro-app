"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _defineProperties(t,e){for(var o=0;o<e.length;o++){var r=e[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,_toPropertyKey(r.key),r)}}function _createClass(t,e,o){return e&&_defineProperties(t.prototype,e),o&&_defineProperties(t,o),Object.defineProperty(t,"prototype",{writable:!1}),t}function _toPropertyKey(t){t=_toPrimitive(t,"string");return"symbol"===_typeof(t)?t:String(t)}function _toPrimitive(t,e){if("object"!==_typeof(t)||null===t)return t;var o=t[Symbol.toPrimitive];if(void 0===o)return("string"===e?String:Number)(t);o=o.call(t,e||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var settingsButton=document.querySelector("#settings-button"),settingsModal=document.querySelector("#settings-modal"),closeModalButton=document.querySelector("#close-settings-modal-button"),settingsForm=settingsModal.querySelector("#settings-form"),pomodoroTimeInput=settingsForm.querySelector("#pomodoro-time"),shortBreakTimeInput=settingsForm.querySelector("#short-break-time"),longBreakTimeInput=settingsForm.querySelector("#long-break-time"),fontRadioButtons=Array.from(settingsForm.querySelectorAll('input[type="radio"][name="font"]')),colourRadioButtons=Array.from(settingsForm.querySelectorAll('input[type="radio"][name="colour"]')),settingsSubmit=settingsForm.querySelector('button[type="submit"]'),stateForm=document.querySelector("#state-form"),timeStateButtons=Array.from(stateForm.querySelectorAll('input[type="radio"][name="time-state"]')),SECONDS_IN_MINUTE=60,DEFAULT_FONT="sans-serif",DEFAULT_COLOUR="red",DEFAULT_POMODORO_TIME=25,DEFAULT_SHORT_BREAK_TIME=5,DEFAULT_LONG_BREAK_TIME=15,AppTheme=_createClass(function t(){var o=this;_classCallCheck(this,t),this.colour=DEFAULT_COLOUR,this.font=DEFAULT_FONT,this.updateTheme=function(t,e){o.colour=e,o.font=t,document.body.dataset.font=t,document.body.dataset.theme=e}}),PomodoroTimer=_createClass(function t(){var e=this,o=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0;_classCallCheck(this,t),this.observers=[],this.state="INITIAL",this.start=function(){e.setState("COUNTING"),e.count()},this.count=function(){0===e.countingTime?(e.setState("END"),clearTimeout(e.countTimeout)):e.countTimeout=setTimeout(function(){e.updateTime(),e.count()},1e3)},this.pause=function(){e.setState("PAUSED"),clearTimeout(e.countTimeout)},this.restart=function(){e.setState("INITIAL"),e.setTime(e.baseTime),clearTimeout(e.countTimeout)},this.getTime=function(){return e.baseTime},this.getCurrentTime=function(){return e.countingTime},this.setTime=function(t){e.baseTime=t,e.countingTime=t,e.notifyObservers()},this.updateTime=function(){e.countingTime--,e.notifyObservers()},this.getState=function(){return e.state},this.setState=function(t){e.state=t,"END"===e.state&&e.notifyObservers()},this.addObserver=function(t){e.observers.push(t)},this.notifyObservers=function(){e.observers.forEach(function(t){return t.update(e)})},this.baseTime=o,this.countingTime=o}),TimerView=_createClass(function t(e){var r=this;_classCallCheck(this,t),this.update=function(t){r.updateTime(t.getCurrentTime()),r.updateProgressBar(t.getCurrentTime(),t.getTime()),"END"===t.getState()&&(r.updateButtonLabel("restart"),r.updateTimeAnnouncement("polite"),r.resetProgressBar())},this.updateButtonLabel=function(t){r.timerButton.innerText=t},this.updateTime=function(t){r.timerTime.innerHTML=formatTime(t)},this.updateProgressBar=function(t,e){var o=Number(getComputedStyle(r.timeProgressBar).getPropertyValue("--circumference"));r.timeProgressBar.style.setProperty("--progress",((1-t/e)*o).toFixed(0))},this.updateTimeAnnouncement=function(){r.timerTime.setAttribute("aria-live",0<arguments.length&&void 0!==arguments[0]?arguments[0]:"off")},this.resetProgressBar=function(){r.timeProgressBar.style.setProperty("--progress","0")},this.timer=document.querySelector(".timer"),this.timeProgressBar=this.timer.querySelector("#progress-bar"),this.timerTime=this.timer.querySelector("#timer-time"),this.timerButton=this.timer.querySelector("#timer-button"),this.timerButton.addEventListener("click",e)}),PomodoroTimerController=_createClass(function t(e){var o=this;_classCallCheck(this,t),this.timerAction=function(){switch(o.timer.getState()){case"INITIAL":case"PAUSED":o.startTimer();break;case"COUNTING":o.pauseTimer();break;case"END":o.restartTimer()}},this.startTimer=function(){o.timer.start(),o.view.updateButtonLabel("pause")},this.pauseTimer=function(){o.timer.pause(),o.view.updateButtonLabel("start")},this.restartTimer=function(){o.timer.restart(),o.view.updateButtonLabel("start"),o.view.updateTimeAnnouncement()},this.setTime=function(t){o.timer.setTime(t)},this.timer=e,this.view=new TimerView(this.timerAction),e.addObserver(this.view)}),PomodoroApp=_createClass(function t(){var r=this,e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:DEFAULT_POMODORO_TIME,o=1<arguments.length&&void 0!==arguments[1]?arguments[1]:DEFAULT_SHORT_BREAK_TIME,i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:DEFAULT_LONG_BREAK_TIME;_classCallCheck(this,t),this.appState="POMODORO",this.setTimes=function(t,e,o){r.pomodoroTime=t,r.shortBreakTime=e,r.longBreakTime=o,r.changeState(r.appState)},this.changeState=function(t){r.appState=t,r.timerController.restartTimer(),r.setTimerBasedOnState()},this.setTimerBasedOnState=function(){switch(r.appState){case"POMODORO":r.timerController.setTime(minutesToSeconds(r.pomodoroTime));break;case"SHORT_BREAK":r.timerController.setTime(minutesToSeconds(r.shortBreakTime));break;case"LONG_BREAK":r.timerController.setTime(minutesToSeconds(r.longBreakTime))}},this.timerController=new PomodoroTimerController(new PomodoroTimer),this.setTimes(e,o,i)}),appTheme=new AppTheme,pomodoroApp=new PomodoroApp;function minutesToSeconds(t){return t*SECONDS_IN_MINUTE}function getMinutesFromSeconds(t){return Math.floor(t/SECONDS_IN_MINUTE)}function getRemainingSeconds(t){return t%SECONDS_IN_MINUTE}function addLeadingZero(t){return t<10?"0".concat(t):t.toString()}function formatTime(t){var e=getMinutesFromSeconds(t),t=getRemainingSeconds(t);return addLeadingZero(e)+":"+addLeadingZero(t)}function openModal(){settingsModal.dataset.open="true",closeModalButton.focus()}function closeModal(){settingsModal.dataset.open="false",settingsButton.focus()}settingsSubmit.addEventListener("click",function(t){t.preventDefault();var t=Number(pomodoroTimeInput.value),e=Number(shortBreakTimeInput.value),o=Number(longBreakTimeInput.value),r=fontRadioButtons.find(function(t){return t.checked}).value,i=colourRadioButtons.find(function(t){return t.checked}).value;pomodoroApp.setTimes(t,e,o),appTheme.updateTheme(r,i),closeModal()}),settingsButton.addEventListener("click",openModal),closeModalButton.addEventListener("click",closeModal),timeStateButtons.forEach(function(t){return t.addEventListener("change",function(t){t=t.target.value.toUpperCase();pomodoroApp.changeState(t)})}),document.addEventListener("keydown",function(t){"Tab"===t.key&&(t.shiftKey&&document.activeElement===closeModalButton?(settingsSubmit.focus(),t.preventDefault()):t.shiftKey||document.activeElement!==settingsSubmit||(closeModalButton.focus(),t.preventDefault()))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
