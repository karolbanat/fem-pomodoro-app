"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _defineProperties(t,e){for(var o=0;o<e.length;o++){var i=e[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,_toPropertyKey(i.key),i)}}function _createClass(t,e,o){return e&&_defineProperties(t.prototype,e),o&&_defineProperties(t,o),Object.defineProperty(t,"prototype",{writable:!1}),t}function _toPropertyKey(t){t=_toPrimitive(t,"string");return"symbol"===_typeof(t)?t:String(t)}function _toPrimitive(t,e){if("object"!==_typeof(t)||null===t)return t;var o=t[Symbol.toPrimitive];if(void 0===o)return("string"===e?String:Number)(t);o=o.call(t,e||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var settingsButton=document.querySelector("#settings-button"),settingsModal=document.querySelector("#settings-modal"),closeModalButton=document.querySelector("#close-settings-modal-button"),settingsForm=settingsModal.querySelector("#settings-form"),pomodoroTimeInput=settingsForm.querySelector("#pomodoro-time"),shortBreakTimeInput=settingsForm.querySelector("#short-break-time"),longBreakTimeInput=settingsForm.querySelector("#long-break-time"),fontRadioButtons=Array.from(settingsForm.querySelectorAll('input[type="radio"][name="font"]')),colourRadioButtons=Array.from(settingsForm.querySelectorAll('input[type="radio"][name="colour"]')),settingsSubmit=settingsForm.querySelector('button[type="submit"]'),timeStateButtons=Array.from(document.querySelectorAll(".state-button")),SECONDS_IN_MINUTE=60,DEFAULT_FONT="sans-serif",DEFAULT_COLOUR="red",DEFAULT_POMODORO_TIME=25,DEFAULT_SHORT_BREAK_TIME=5,DEFAULT_LONG_BREAK_TIME=15,AppTheme=_createClass(function t(){var o=this;_classCallCheck(this,t),this.colour=DEFAULT_COLOUR,this.font=DEFAULT_FONT,this.updateTheme=function(t,e){o.colour=e,o.font=t,document.body.dataset.font=t,document.body.dataset.theme=e}}),PomodoroTimer=_createClass(function t(){var e=this,o=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0;_classCallCheck(this,t),this.observers=[],this.state="INITIAL",this.start=function(){e.setState("COUNTING"),e.count()},this.count=function(){0===e.countingTime?(e.setState("END"),clearTimeout(e.countTimeout)):e.countTimeout=setTimeout(function(){e.updateTime(),e.count()},1e3)},this.pause=function(){e.setState("PAUSED"),clearTimeout(e.countTimeout)},this.restart=function(){e.setState("INITIAL"),e.setTime(e.baseTime),clearTimeout(e.countTimeout)},this.getTime=function(){return e.baseTime},this.getCurrentTime=function(){return e.countingTime},this.setTime=function(t){e.baseTime=t,e.countingTime=t,e.notifyObservers()},this.updateTime=function(){e.countingTime--,e.notifyObservers()},this.getState=function(){return e.state},this.setState=function(t){e.state=t,"END"===e.state&&e.notifyObservers()},this.addObserver=function(t){e.observers.push(t)},this.notifyObservers=function(){e.observers.forEach(function(t){return t.update(e)})},this.baseTime=o,this.countingTime=o}),TimerView=_createClass(function t(e){var i=this;_classCallCheck(this,t),this.update=function(t){i.updateTime(t.getCurrentTime()),i.updateProgressBar(t.getCurrentTime(),t.getTime()),"END"===t.getState()&&(i.updateButtonLabel("restart"),i.updateTimeAnnouncement("polite"),i.resetProgressBar())},this.updateButtonLabel=function(t){i.timerButton.innerText=t},this.updateTime=function(t){i.timerTime.innerHTML=formatTime(t)},this.updateProgressBar=function(t,e){var o=Number(getComputedStyle(i.timeProgressBar).getPropertyValue("--circumference"));i.timeProgressBar.style.setProperty("--progress",((1-t/e)*o).toFixed(0))},this.updateTimeAnnouncement=function(){i.timerTime.setAttribute("aria-live",0<arguments.length&&void 0!==arguments[0]?arguments[0]:"off")},this.resetProgressBar=function(){i.timeProgressBar.style.setProperty("--progress","0")},this.timer=document.querySelector(".timer"),this.timeProgressBar=this.timer.querySelector("#progress-bar"),this.timerTime=this.timer.querySelector("#timer-time"),this.timerButton=this.timer.querySelector("#timer-button"),this.timerButton.addEventListener("click",e)}),PomodoroTimerController=_createClass(function t(e){var o=this;_classCallCheck(this,t),this.timerAction=function(){switch(o.timer.getState()){case"INITIAL":case"PAUSED":o.startTimer();break;case"COUNTING":o.pauseTimer();break;case"END":o.restartTimer()}},this.startTimer=function(){o.timer.start(),o.view.updateButtonLabel("pause")},this.pauseTimer=function(){o.timer.pause(),o.view.updateButtonLabel("start")},this.restartTimer=function(){o.timer.restart(),o.view.updateButtonLabel("start"),o.view.updateTimeAnnouncement()},this.setTime=function(t){o.timer.setTime(t)},this.timer=e,this.view=new TimerView(this.timerAction),e.addObserver(this.view)}),PomodoroApp=_createClass(function t(){var i=this,e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:DEFAULT_POMODORO_TIME,o=1<arguments.length&&void 0!==arguments[1]?arguments[1]:DEFAULT_SHORT_BREAK_TIME,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:DEFAULT_LONG_BREAK_TIME;_classCallCheck(this,t),this.appState="POMODORO",this.setTimes=function(t,e,o){i.pomodoroTime=t,i.shortBreakTime=e,i.longBreakTime=o,i.changeState(i.appState)},this.changeState=function(t){i.appState=t,i.timerController.restartTimer(),i.setTimerBasedOnState()},this.setTimerBasedOnState=function(){switch(i.appState){case"POMODORO":i.timerController.setTime(minutesToSeconds(i.pomodoroTime));break;case"SHORT_BREAK":i.timerController.setTime(minutesToSeconds(i.shortBreakTime));break;case"LONG_BREAK":i.timerController.setTime(minutesToSeconds(i.longBreakTime))}},this.timerController=new PomodoroTimerController(new PomodoroTimer),this.setTimes(e,o,r)}),appTheme=new AppTheme,pomodoroApp=new PomodoroApp;function minutesToSeconds(t){return t*SECONDS_IN_MINUTE}function getMinutesFromSeconds(t){return Math.floor(t/SECONDS_IN_MINUTE)}function getRemainingSeconds(t){return t%SECONDS_IN_MINUTE}function addLeadingZero(t){return t<10?"0".concat(t):t.toString()}function formatTime(t){var e=getMinutesFromSeconds(t),t=getRemainingSeconds(t);return addLeadingZero(e)+":"+addLeadingZero(t)}function activateStateButton(t){timeStateButtons.forEach(function(t){return t.classList.remove("active")}),t.classList.add("active")}function openModal(){settingsModal.dataset.open="true",closeModalButton.focus()}function closeModal(){settingsModal.dataset.open="false",settingsButton.focus()}settingsSubmit.addEventListener("click",function(t){t.preventDefault();var t=Number(pomodoroTimeInput.value),e=Number(shortBreakTimeInput.value),o=Number(longBreakTimeInput.value),i=fontRadioButtons.find(function(t){return t.checked}).value,r=colourRadioButtons.find(function(t){return t.checked}).value;pomodoroApp.setTimes(t,e,o),appTheme.updateTheme(i,r),closeModal()}),settingsButton.addEventListener("click",function(){openModal()}),null!=closeModalButton&&closeModalButton.addEventListener("click",function(){closeModal()}),timeStateButtons.forEach(function(t){return t.addEventListener("click",function(t){var t=t.target,e=t.dataset.state.toUpperCase();activateStateButton(t),pomodoroApp.changeState(e)})}),document.addEventListener("keydown",function(t){"Tab"===t.key&&(t.shiftKey&&document.activeElement===closeModalButton?(settingsSubmit.focus(),t.preventDefault()):t.shiftKey||document.activeElement!==settingsSubmit||(closeModalButton.focus(),t.preventDefault()))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOlsic2V0dGluZ3NCdXR0b24iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJzZXR0aW5nc01vZGFsIiwiY2xvc2VNb2RhbEJ1dHRvbiIsInNldHRpbmdzRm9ybSIsInBvbW9kb3JvVGltZUlucHV0Iiwic2hvcnRCcmVha1RpbWVJbnB1dCIsImxvbmdCcmVha1RpbWVJbnB1dCIsImZvbnRSYWRpb0J1dHRvbnMiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiY29sb3VyUmFkaW9CdXR0b25zIiwic2V0dGluZ3NTdWJtaXQiLCJ0aW1lU3RhdGVCdXR0b25zIiwiU0VDT05EU19JTl9NSU5VVEUiLCJERUZBVUxUX0ZPTlQiLCJERUZBVUxUX0NPTE9VUiIsIkRFRkFVTFRfUE9NT0RPUk9fVElNRSIsIkRFRkFVTFRfU0hPUlRfQlJFQUtfVElNRSIsIkRFRkFVTFRfTE9OR19CUkVBS19USU1FIiwiQXBwVGhlbWUiLCJfY3JlYXRlQ2xhc3MiLCJfdGhpcyIsInRoaXMiLCJfY2xhc3NDYWxsQ2hlY2siLCJjb2xvdXIiLCJmb250IiwidXBkYXRlVGhlbWUiLCJib2R5IiwiZGF0YXNldCIsInRoZW1lIiwiUG9tb2Rvcm9UaW1lciIsIl90aGlzMiIsInRpbWUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJvYnNlcnZlcnMiLCJzdGF0ZSIsInN0YXJ0Iiwic2V0U3RhdGUiLCJjb3VudCIsImNvdW50aW5nVGltZSIsImNsZWFyVGltZW91dCIsImNvdW50VGltZW91dCIsInNldFRpbWVvdXQiLCJ1cGRhdGVUaW1lIiwicGF1c2UiLCJyZXN0YXJ0Iiwic2V0VGltZSIsImJhc2VUaW1lIiwiZ2V0VGltZSIsImdldEN1cnJlbnRUaW1lIiwibm90aWZ5T2JzZXJ2ZXJzIiwiZ2V0U3RhdGUiLCJhZGRPYnNlcnZlciIsIm9ic2VydmVyIiwicHVzaCIsImZvckVhY2giLCJ1cGRhdGUiLCJUaW1lclZpZXciLCJidXR0b25PbkNsaWNrIiwiX3RoaXMzIiwib2JzZXJ2YWJsZSIsIm9icyIsInVwZGF0ZVByb2dyZXNzQmFyIiwidXBkYXRlQnV0dG9uTGFiZWwiLCJ1cGRhdGVUaW1lQW5ub3VuY2VtZW50IiwicmVzZXRQcm9ncmVzc0JhciIsImxhYmVsIiwidGltZXJCdXR0b24iLCJpbm5lclRleHQiLCJ0aW1lclRpbWUiLCJpbm5lckhUTUwiLCJmb3JtYXRUaW1lIiwiY3VycmVudCIsImJhc2UiLCJjaXJjdW1mZXJlbmNlIiwiTnVtYmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInRpbWVQcm9ncmVzc0JhciIsImdldFByb3BlcnR5VmFsdWUiLCJzdHlsZSIsInNldFByb3BlcnR5IiwidG9GaXhlZCIsInNldEF0dHJpYnV0ZSIsInRpbWVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsIlBvbW9kb3JvVGltZXJDb250cm9sbGVyIiwiX3RoaXM0IiwidGltZXJBY3Rpb24iLCJzdGFydFRpbWVyIiwicGF1c2VUaW1lciIsInJlc3RhcnRUaW1lciIsInZpZXciLCJQb21vZG9yb0FwcCIsIl90aGlzNSIsInBvbW9kb3JvVGltZSIsInNob3J0QnJlYWtUaW1lIiwibG9uZ0JyZWFrVGltZSIsImFwcFN0YXRlIiwic2V0VGltZXMiLCJwb21vZG9ybyIsInNob3J0QnJlYWsiLCJsb25nQnJlYWsiLCJjaGFuZ2VTdGF0ZSIsInRpbWVyQ29udHJvbGxlciIsInNldFRpbWVyQmFzZWRPblN0YXRlIiwibWludXRlc1RvU2Vjb25kcyIsImFwcFRoZW1lIiwicG9tb2Rvcm9BcHAiLCJtaW51dGVzIiwiZ2V0TWludXRlc0Zyb21TZWNvbmRzIiwic2Vjb25kcyIsIk1hdGgiLCJmbG9vciIsImdldFJlbWFpbmluZ1NlY29uZHMiLCJhZGRMZWFkaW5nWmVybyIsImNvbmNhdCIsInRvU3RyaW5nIiwicmVtYWluaW5nU2Vjb25kcyIsImFjdGl2YXRlU3RhdGVCdXR0b24iLCJidXR0b24iLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhZGQiLCJvcGVuTW9kYWwiLCJvcGVuIiwiZm9jdXMiLCJjbG9zZU1vZGFsIiwiZSIsInByZXZlbnREZWZhdWx0IiwidmFsdWUiLCJjaG9zZW5Gb250IiwiZmluZCIsImNoZWNrZWQiLCJjaG9zZW5Db2xvdXIiLCJ0YXJnZXQiLCJ0b1VwcGVyQ2FzZSIsImtleSIsInNoaWZ0S2V5IiwiYWN0aXZlRWxlbWVudCJdLCJtYXBwaW5ncyI6IjJqQ0FDQSxJQUFNQSxlQUFvQ0MsU0FBU0MsY0FBYyxrQkFBa0IsRUFDN0VDLGNBQTZCRixTQUFTQyxjQUFjLGlCQUFpQixFQUNyRUUsaUJBQXNDSCxTQUFTQyxjQUFjLDhCQUE4QixFQUczRkcsYUFBZ0NGLGNBQWNELGNBQWMsZ0JBQWdCLEVBQzVFSSxrQkFBc0NELGFBQWFILGNBQWMsZ0JBQWdCLEVBQ2pGSyxvQkFBd0NGLGFBQWFILGNBQWMsbUJBQW1CLEVBQ3RGTSxtQkFBdUNILGFBQWFILGNBQWMsa0JBQWtCLEVBQ3BGTyxpQkFBNENDLE1BQU1DLEtBQ3ZETixhQUFhTyxpQkFBaUIsa0NBQWtDLENBQUMsRUFFNURDLG1CQUE4Q0gsTUFBTUMsS0FDekROLGFBQWFPLGlCQUFpQixvQ0FBb0MsQ0FBQyxFQUU5REUsZUFBb0NULGFBQWFILGNBQWMsdUJBQXVCLEVBR3RGYSxpQkFBNkNMLE1BQU1DLEtBQUtWLFNBQVNXLGlCQUFpQixlQUFlLENBQUMsRUFJbEdJLGtCQUE0QixHQUU1QkMsYUFBcUIsYUFDckJDLGVBQXlCLE1BRXpCQyxzQkFBZ0MsR0FDaENDLHlCQUFtQyxFQUNuQ0Msd0JBQWtDLEdBNENsQ0MsU0FBUUMsYUFBZCxTQUFBRCxJQUFBLElBQUFFLEVBQUFDLEtBQUFDLGdCQUFBRCxLQUFBSCxDQUFBLEVBQ0NHLEtBQUFFLE9BQWlCVCxlQUNqQk8sS0FBQUcsS0FBYVgsYUFFYlEsS0FBQUksWUFBYyxTQUFDRCxFQUFZRCxHQUMxQkgsRUFBS0csT0FBU0EsRUFDZEgsRUFBS0ksS0FBT0EsRUFDWjNCLFNBQVM2QixLQUFLQyxRQUFRSCxLQUFPQSxFQUM3QjNCLFNBQVM2QixLQUFLQyxRQUFR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ZGFsIHJlYWx0ZWQgZWxlbWVudHMgKi9cclxuY29uc3Qgc2V0dGluZ3NCdXR0b246IEhUTUxCdXR0b25FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NldHRpbmdzLWJ1dHRvbicpO1xyXG5jb25zdCBzZXR0aW5nc01vZGFsOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZXR0aW5ncy1tb2RhbCcpO1xyXG5jb25zdCBjbG9zZU1vZGFsQnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjbG9zZS1zZXR0aW5ncy1tb2RhbC1idXR0b24nKTtcclxuXHJcbi8qIHNldHRpbmdzIGZvcm0gZWxlbWVudHMgKi9cclxuY29uc3Qgc2V0dGluZ3NGb3JtOiBIVE1MRm9ybUVsZW1lbnQgPSBzZXR0aW5nc01vZGFsLnF1ZXJ5U2VsZWN0b3IoJyNzZXR0aW5ncy1mb3JtJyk7XHJcbmNvbnN0IHBvbW9kb3JvVGltZUlucHV0OiBIVE1MSW5wdXRFbGVtZW50ID0gc2V0dGluZ3NGb3JtLnF1ZXJ5U2VsZWN0b3IoJyNwb21vZG9yby10aW1lJyk7XHJcbmNvbnN0IHNob3J0QnJlYWtUaW1lSW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQgPSBzZXR0aW5nc0Zvcm0ucXVlcnlTZWxlY3RvcignI3Nob3J0LWJyZWFrLXRpbWUnKTtcclxuY29uc3QgbG9uZ0JyZWFrVGltZUlucHV0OiBIVE1MSW5wdXRFbGVtZW50ID0gc2V0dGluZ3NGb3JtLnF1ZXJ5U2VsZWN0b3IoJyNsb25nLWJyZWFrLXRpbWUnKTtcclxuY29uc3QgZm9udFJhZGlvQnV0dG9uczogQXJyYXk8SFRNTElucHV0RWxlbWVudD4gPSBBcnJheS5mcm9tKFxyXG5cdHNldHRpbmdzRm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFt0eXBlPVwicmFkaW9cIl1bbmFtZT1cImZvbnRcIl0nKVxyXG4pO1xyXG5jb25zdCBjb2xvdXJSYWRpb0J1dHRvbnM6IEFycmF5PEhUTUxJbnB1dEVsZW1lbnQ+ID0gQXJyYXkuZnJvbShcclxuXHRzZXR0aW5nc0Zvcm0ucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbdHlwZT1cInJhZGlvXCJdW25hbWU9XCJjb2xvdXJcIl0nKVxyXG4pO1xyXG5jb25zdCBzZXR0aW5nc1N1Ym1pdDogSFRNTEJ1dHRvbkVsZW1lbnQgPSBzZXR0aW5nc0Zvcm0ucXVlcnlTZWxlY3RvcignYnV0dG9uW3R5cGU9XCJzdWJtaXRcIl0nKTtcclxuXHJcbi8qIHRpbWUgc3RhdGUgYnV0dG9ucyAqL1xyXG5jb25zdCB0aW1lU3RhdGVCdXR0b25zOiBBcnJheTxIVE1MQnV0dG9uRWxlbWVudD4gPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zdGF0ZS1idXR0b24nKSk7XHJcblxyXG4vKiBjb25zdGFudHMgKi9cclxuLyogLS0tIGdlbmVyYWwgKi9cclxuY29uc3QgU0VDT05EU19JTl9NSU5VVEU6IG51bWJlciA9IDYwO1xyXG4vKiAtLS0gdGhlbWUgKi9cclxuY29uc3QgREVGQVVMVF9GT05UOiBGb250ID0gJ3NhbnMtc2VyaWYnO1xyXG5jb25zdCBERUZBVUxUX0NPTE9VUjogQ29sb3VyID0gJ3JlZCc7XHJcbi8qIC0tLSB0aW1lcyAqL1xyXG5jb25zdCBERUZBVUxUX1BPTU9ET1JPX1RJTUU6IG51bWJlciA9IDI1O1xyXG5jb25zdCBERUZBVUxUX1NIT1JUX0JSRUFLX1RJTUU6IG51bWJlciA9IDU7XHJcbmNvbnN0IERFRkFVTFRfTE9OR19CUkVBS19USU1FOiBudW1iZXIgPSAxNTtcclxuXHJcbi8qIHR5cGVzICovXHJcbnR5cGUgQ29sb3VyID0gJ3JlZCcgfCAnY3lhbicgfCAndmlvbGV0JztcclxudHlwZSBGb250ID0gJ3NlcmlmJyB8ICdzYW5zLXNlcmlmJyB8ICdtb25vc3BhY2UnO1xyXG50eXBlIFRpbWVyU3RhdGUgPSAnSU5JVElBTCcgfCAnQ09VTlRJTkcnIHwgJ1BBVVNFRCcgfCAnRU5EJztcclxudHlwZSBQb21vZG9yb0FwcFN0YXRlcyA9ICdQT01PRE9STycgfCAnU0hPUlRfQlJFQUsnIHwgJ0xPTkdfQlJFQUsnO1xyXG5cclxuLyogaW50ZXJmYWNlcyAqL1xyXG5pbnRlcmZhY2UgT2JzZXJ2YWJsZSB7XHJcblx0YWRkT2JzZXJ2ZXI6IChvYnNlcnZlcjogT2JzZXJ2ZXIpID0+IHZvaWQ7XHJcblx0bm90aWZ5T2JzZXJ2ZXJzOiAoKSA9PiB2b2lkO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgT2JzZXJ2ZXIge1xyXG5cdHVwZGF0ZTogKG9ic2VydmFibGU6IE9ic2VydmFibGUpID0+IHZvaWQ7XHJcbn1cclxuXHJcbmludGVyZmFjZSBUaGVtZSB7XHJcblx0Y29sb3VyOiBDb2xvdXI7XHJcblx0Zm9udDogRm9udDtcclxuXHR1cGRhdGVUaGVtZTogKGZvbnQ6IEZvbnQsIGNvbG91cjogQ29sb3VyKSA9PiB2b2lkO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgVGltZXIgZXh0ZW5kcyBPYnNlcnZhYmxlIHtcclxuXHRzdGF0ZTogVGltZXJTdGF0ZTtcclxuXHRzdGFydDogKCkgPT4gdm9pZDtcclxuXHRwYXVzZTogKCkgPT4gdm9pZDtcclxuXHRyZXN0YXJ0OiAoKSA9PiB2b2lkO1xyXG5cdHNldFRpbWU6ICh0aW1lOiBudW1iZXIpID0+IHZvaWQ7XHJcblx0Z2V0VGltZTogKCkgPT4gbnVtYmVyO1xyXG5cdGdldEN1cnJlbnRUaW1lOiAoKSA9PiBudW1iZXI7XHJcblx0Z2V0U3RhdGU6ICgpID0+IFRpbWVyU3RhdGU7XHJcblx0c2V0U3RhdGU6IChzdGF0ZTogVGltZXJTdGF0ZSkgPT4gdm9pZDtcclxufVxyXG5cclxuaW50ZXJmYWNlIFRpbWVyQ29udHJvbGxlciB7XHJcblx0c3RhcnRUaW1lcjogKCkgPT4gdm9pZDtcclxuXHRwYXVzZVRpbWVyOiAoKSA9PiB2b2lkO1xyXG5cdHJlc3RhcnRUaW1lcjogKCkgPT4gdm9pZDtcclxuXHRzZXRUaW1lOiAodGltZTogbnVtYmVyKSA9PiB2b2lkO1xyXG59XHJcblxyXG4vKiBjbGFzc2VzICovXHJcbmNsYXNzIEFwcFRoZW1lIGltcGxlbWVudHMgVGhlbWUge1xyXG5cdGNvbG91cjogQ29sb3VyID0gREVGQVVMVF9DT0xPVVI7XHJcblx0Zm9udDogRm9udCA9IERFRkFVTFRfRk9OVDtcclxuXHJcblx0dXBkYXRlVGhlbWUgPSAoZm9udDogRm9udCwgY29sb3VyOiBDb2xvdXIpOiB2b2lkID0+IHtcclxuXHRcdHRoaXMuY29sb3VyID0gY29sb3VyO1xyXG5cdFx0dGhpcy5mb250ID0gZm9udDtcclxuXHRcdGRvY3VtZW50LmJvZHkuZGF0YXNldC5mb250ID0gZm9udDtcclxuXHRcdGRvY3VtZW50LmJvZHkuZGF0YXNldC50aGVtZSA9IGNvbG91cjtcclxuXHR9O1xyXG59XHJcblxyXG5jbGFzcyBQb21vZG9yb1RpbWVyIGltcGxlbWVudHMgVGltZXIge1xyXG5cdG9ic2VydmVyczogT2JzZXJ2ZXJbXSA9IFtdO1xyXG5cdGNvdW50VGltZW91dDogTm9kZUpTLlRpbWVvdXQ7XHJcblx0c3RhdGU6IFRpbWVyU3RhdGUgPSAnSU5JVElBTCc7XHJcblxyXG5cdHByaXZhdGUgY291bnRpbmdUaW1lOiBudW1iZXI7XHJcblx0cHJpdmF0ZSBiYXNlVGltZTogbnVtYmVyO1xyXG5cclxuXHRjb25zdHJ1Y3Rvcih0aW1lOiBudW1iZXIgPSAwKSB7XHJcblx0XHR0aGlzLmJhc2VUaW1lID0gdGltZTtcclxuXHRcdHRoaXMuY291bnRpbmdUaW1lID0gdGltZTtcclxuXHR9XHJcblxyXG5cdHN0YXJ0ID0gKCk6IHZvaWQgPT4ge1xyXG5cdFx0dGhpcy5zZXRTdGF0ZSgnQ09VTlRJTkcnKTtcclxuXHRcdHRoaXMuY291bnQoKTtcclxuXHR9O1xyXG5cclxuXHRjb3VudCA9ICgpOiB2b2lkID0+IHtcclxuXHRcdGlmICh0aGlzLmNvdW50aW5nVGltZSA9PT0gMCkge1xyXG5cdFx0XHR0aGlzLnNldFN0YXRlKCdFTkQnKTtcclxuXHRcdFx0Y2xlYXJUaW1lb3V0KHRoaXMuY291bnRUaW1lb3V0KTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuY291bnRUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdHRoaXMudXBkYXRlVGltZSgpO1xyXG5cdFx0XHR0aGlzLmNvdW50KCk7XHJcblx0XHR9LCAxMDAwKTtcclxuXHR9O1xyXG5cclxuXHRwYXVzZSA9ICgpOiB2b2lkID0+IHtcclxuXHRcdHRoaXMuc2V0U3RhdGUoJ1BBVVNFRCcpO1xyXG5cdFx0Y2xlYXJUaW1lb3V0KHRoaXMuY291bnRUaW1lb3V0KTtcclxuXHR9O1xyXG5cclxuXHRyZXN0YXJ0ID0gKCk6IHZvaWQgPT4ge1xyXG5cdFx0dGhpcy5zZXRTdGF0ZSgnSU5JVElBTCcpO1xyXG5cdFx0dGhpcy5zZXRUaW1lKHRoaXMuYmFzZVRpbWUpO1xyXG5cdFx0Y2xlYXJUaW1lb3V0KHRoaXMuY291bnRUaW1lb3V0KTtcclxuXHR9O1xyXG5cclxuXHRnZXRUaW1lID0gKCk6IG51bWJlciA9PiB0aGlzLmJhc2VUaW1lO1xyXG5cclxuXHRnZXRDdXJyZW50VGltZSA9ICgpOiBudW1iZXIgPT4gdGhpcy5jb3VudGluZ1RpbWU7XHJcblxyXG5cdHNldFRpbWUgPSAodGltZTogbnVtYmVyKTogdm9pZCA9PiB7XHJcblx0XHR0aGlzLmJhc2VUaW1lID0gdGltZTtcclxuXHRcdHRoaXMuY291bnRpbmdUaW1lID0gdGltZTtcclxuXHRcdHRoaXMubm90aWZ5T2JzZXJ2ZXJzKCk7XHJcblx0fTtcclxuXHJcblx0dXBkYXRlVGltZSA9ICgpOiB2b2lkID0+IHtcclxuXHRcdHRoaXMuY291bnRpbmdUaW1lLS07XHJcblx0XHR0aGlzLm5vdGlmeU9ic2VydmVycygpO1xyXG5cdH07XHJcblxyXG5cdGdldFN0YXRlID0gKCk6IFRpbWVyU3RhdGUgPT4gdGhpcy5zdGF0ZTtcclxuXHJcblx0c2V0U3RhdGUgPSAoc3RhdGU6IFRpbWVyU3RhdGUpOiB2b2lkID0+IHtcclxuXHRcdHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuXHJcblx0XHRpZiAodGhpcy5zdGF0ZSA9PT0gJ0VORCcpIHRoaXMubm90aWZ5T2JzZXJ2ZXJzKCk7XHJcblx0fTtcclxuXHJcblx0Lyogb2JzZXJ2ZXIgaW1wbGVtZW50YXRpb24gKi9cclxuXHRhZGRPYnNlcnZlciA9IChvYnNlcnZlcjogT2JzZXJ2ZXIpOiB2b2lkID0+IHtcclxuXHRcdHRoaXMub2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xyXG5cdH07XHJcblxyXG5cdG5vdGlmeU9ic2VydmVycyA9ICgpOiB2b2lkID0+IHtcclxuXHRcdHRoaXMub2JzZXJ2ZXJzLmZvckVhY2gob2JzZXJ2ZXIgPT4gb2JzZXJ2ZXIudXBkYXRlKHRoaXMpKTtcclxuXHR9O1xyXG59XHJcblxyXG5jbGFzcyBUaW1lclZpZXcgaW1wbGVtZW50cyBPYnNlcnZlciB7XHJcblx0cHJpdmF0ZSB0aW1lcjogSFRNTEVsZW1lbnQ7XHJcblx0cHJpdmF0ZSB0aW1lUHJvZ3Jlc3NCYXI6IEhUTUxFbGVtZW50O1xyXG5cdHByaXZhdGUgdGltZXJUaW1lOiBIVE1MRWxlbWVudDtcclxuXHRwcml2YXRlIHRpbWVyQnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudDtcclxuXHJcblx0Y29uc3RydWN0b3IoYnV0dG9uT25DbGljazogKGU6IEV2ZW50KSA9PiB2b2lkKSB7XHJcblx0XHR0aGlzLnRpbWVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRpbWVyJyk7XHJcblx0XHR0aGlzLnRpbWVQcm9ncmVzc0JhciA9IHRoaXMudGltZXIucXVlcnlTZWxlY3RvcignI3Byb2dyZXNzLWJhcicpO1xyXG5cdFx0dGhpcy50aW1lclRpbWUgPSB0aGlzLnRpbWVyLnF1ZXJ5U2VsZWN0b3IoJyN0aW1lci10aW1lJyk7XHJcblx0XHR0aGlzLnRpbWVyQnV0dG9uID0gdGhpcy50aW1lci5xdWVyeVNlbGVjdG9yKCcjdGltZXItYnV0dG9uJyk7XHJcblx0XHR0aGlzLnRpbWVyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYnV0dG9uT25DbGljayk7XHJcblx0fVxyXG5cclxuXHR1cGRhdGUgPSAob2JzZXJ2YWJsZTogT2JzZXJ2YWJsZSk6IHZvaWQgPT4ge1xyXG5cdFx0Y29uc3Qgb2JzOiBUaW1lciA9IG9ic2VydmFibGUgYXMgVGltZXI7XHJcblx0XHR0aGlzLnVwZGF0ZVRpbWUob2JzLmdldEN1cnJlbnRUaW1lKCkpO1xyXG5cdFx0dGhpcy51cGRhdGVQcm9ncmVzc0JhcihvYnMuZ2V0Q3VycmVudFRpbWUoKSwgb2JzLmdldFRpbWUoKSk7XHJcblxyXG5cdFx0aWYgKG9icy5nZXRTdGF0ZSgpID09PSAnRU5EJykge1xyXG5cdFx0XHR0aGlzLnVwZGF0ZUJ1dHRvbkxhYmVsKCdyZXN0YXJ0Jyk7XHJcblx0XHRcdHRoaXMudXBkYXRlVGltZUFubm91bmNlbWVudCgncG9saXRlJyk7XHJcblx0XHRcdHRoaXMucmVzZXRQcm9ncmVzc0JhcigpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdHVwZGF0ZUJ1dHRvbkxhYmVsID0gKGxhYmVsOiBzdHJpbmcpOiB2b2lkID0+IHtcclxuXHRcdHRoaXMudGltZXJCdXR0b24uaW5uZXJUZXh0ID0gbGFiZWw7XHJcblx0fTtcclxuXHJcblx0dXBkYXRlVGltZSA9ICh0aW1lOiBudW1iZXIpOiB2b2lkID0+IHtcclxuXHRcdHRoaXMudGltZXJUaW1lLmlubmVySFRNTCA9IGZvcm1hdFRpbWUodGltZSk7XHJcblx0fTtcclxuXHJcblx0dXBkYXRlUHJvZ3Jlc3NCYXIgPSAoY3VycmVudDogbnVtYmVyLCBiYXNlOiBudW1iZXIpOiB2b2lkID0+IHtcclxuXHRcdGNvbnN0IGNpcmN1bWZlcmVuY2U6IG51bWJlciA9IE51bWJlcihnZXRDb21wdXRlZFN0eWxlKHRoaXMudGltZVByb2dyZXNzQmFyKS5nZXRQcm9wZXJ0eVZhbHVlKCctLWNpcmN1bWZlcmVuY2UnKSk7XHJcblx0XHR0aGlzLnRpbWVQcm9ncmVzc0Jhci5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1wcm9ncmVzcycsICgoMSAtIGN1cnJlbnQgLyBiYXNlKSAqIGNpcmN1bWZlcmVuY2UpLnRvRml4ZWQoMCkpO1xyXG5cdH07XHJcblxyXG5cdHVwZGF0ZVRpbWVBbm5vdW5jZW1lbnQgPSAodmFsdWU6IHN0cmluZyA9ICdvZmYnKTogdm9pZCA9PiB7XHJcblx0XHR0aGlzLnRpbWVyVGltZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGl2ZScsIHZhbHVlKTtcclxuXHR9O1xyXG5cclxuXHRyZXNldFByb2dyZXNzQmFyID0gKCk6IHZvaWQgPT4ge1xyXG5cdFx0dGhpcy50aW1lUHJvZ3Jlc3NCYXIuc3R5bGUuc2V0UHJvcGVydHkoJy0tcHJvZ3Jlc3MnLCAnMCcpO1xyXG5cdH07XHJcbn1cclxuXHJcbmNsYXNzIFBvbW9kb3JvVGltZXJDb250cm9sbGVyIGltcGxlbWVudHMgVGltZXJDb250cm9sbGVyIHtcclxuXHRwcml2YXRlIHRpbWVyOiBUaW1lcjtcclxuXHRwcml2YXRlIHZpZXc6IFRpbWVyVmlldztcclxuXHRjb25zdHJ1Y3Rvcih0aW1lcjogVGltZXIpIHtcclxuXHRcdHRoaXMudGltZXIgPSB0aW1lcjtcclxuXHRcdHRoaXMudmlldyA9IG5ldyBUaW1lclZpZXcodGhpcy50aW1lckFjdGlvbik7XHJcblxyXG5cdFx0dGltZXIuYWRkT2JzZXJ2ZXIodGhpcy52aWV3KTtcclxuXHR9XHJcblxyXG5cdHRpbWVyQWN0aW9uID0gKCk6IHZvaWQgPT4ge1xyXG5cdFx0c3dpdGNoICh0aGlzLnRpbWVyLmdldFN0YXRlKCkpIHtcclxuXHRcdFx0Y2FzZSAnSU5JVElBTCc6XHJcblx0XHRcdGNhc2UgJ1BBVVNFRCc6XHJcblx0XHRcdFx0dGhpcy5zdGFydFRpbWVyKCk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdGNhc2UgJ0NPVU5USU5HJzpcclxuXHRcdFx0XHR0aGlzLnBhdXNlVGltZXIoKTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0Y2FzZSAnRU5EJzpcclxuXHRcdFx0XHR0aGlzLnJlc3RhcnRUaW1lcigpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdHN0YXJ0VGltZXIgPSAoKTogdm9pZCA9PiB7XHJcblx0XHR0aGlzLnRpbWVyLnN0YXJ0KCk7XHJcblx0XHR0aGlzLnZpZXcudXBkYXRlQnV0dG9uTGFiZWwoJ3BhdXNlJyk7XHJcblx0fTtcclxuXHJcblx0cGF1c2VUaW1lciA9ICgpOiB2b2lkID0+IHtcclxuXHRcdHRoaXMudGltZXIucGF1c2UoKTtcclxuXHRcdHRoaXMudmlldy51cGRhdGVCdXR0b25MYWJlbCgnc3RhcnQnKTtcclxuXHR9O1xyXG5cclxuXHRyZXN0YXJ0VGltZXIgPSAoKTogdm9pZCA9PiB7XHJcblx0XHR0aGlzLnRpbWVyLnJlc3RhcnQoKTtcclxuXHRcdHRoaXMudmlldy51cGRhdGVCdXR0b25MYWJlbCgnc3RhcnQnKTtcclxuXHRcdHRoaXMudmlldy51cGRhdGVUaW1lQW5ub3VuY2VtZW50KCk7XHJcblx0fTtcclxuXHJcblx0c2V0VGltZSA9ICh0aW1lOiBudW1iZXIpOiB2b2lkID0+IHtcclxuXHRcdHRoaXMudGltZXIuc2V0VGltZSh0aW1lKTtcclxuXHR9O1xyXG59XHJcblxyXG5jbGFzcyBQb21vZG9yb0FwcCB7XHJcblx0cHJpdmF0ZSB0aW1lckNvbnRyb2xsZXI6IFRpbWVyQ29udHJvbGxlcjtcclxuXHRwcml2YXRlIGFwcFN0YXRlOiBQb21vZG9yb0FwcFN0YXRlcyA9ICdQT01PRE9STyc7XHJcblxyXG5cdHByaXZhdGUgcG9tb2Rvcm9UaW1lOiBudW1iZXI7XHJcblx0cHJpdmF0ZSBzaG9ydEJyZWFrVGltZTogbnVtYmVyO1xyXG5cdHByaXZhdGUgbG9uZ0JyZWFrVGltZTogbnVtYmVyO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihcclxuXHRcdHBvbW9kb3JvVGltZTogbnVtYmVyID0gREVGQVVMVF9QT01PRE9ST19USU1FLFxyXG5cdFx0c2hvcnRCcmVha1RpbWU6IG51bWJlciA9IERFRkFVTFRfU0hPUlRfQlJFQUtfVElNRSxcclxuXHRcdGxvbmdCcmVha1RpbWU6IG51bWJlciA9IERFRkFVTFRfTE9OR19CUkVBS19USU1FXHJcblx0KSB7XHJcblx0XHR0aGlzLnRpbWVyQ29udHJvbGxlciA9IG5ldyBQb21vZG9yb1RpbWVyQ29udHJvbGxlcihuZXcgUG9tb2Rvcm9UaW1lcigpKTtcclxuXHRcdHRoaXMuc2V0VGltZXMocG9tb2Rvcm9UaW1lLCBzaG9ydEJyZWFrVGltZSwgbG9uZ0JyZWFrVGltZSk7XHJcblx0fVxyXG5cclxuXHRzZXRUaW1lcyA9IChwb21vZG9ybzogbnVtYmVyLCBzaG9ydEJyZWFrOiBudW1iZXIsIGxvbmdCcmVhazogbnVtYmVyKTogdm9pZCA9PiB7XHJcblx0XHR0aGlzLnBvbW9kb3JvVGltZSA9IHBvbW9kb3JvO1xyXG5cdFx0dGhpcy5zaG9ydEJyZWFrVGltZSA9IHNob3J0QnJlYWs7XHJcblx0XHR0aGlzLmxvbmdCcmVha1RpbWUgPSBsb25nQnJlYWs7XHJcblx0XHR0aGlzLmNoYW5nZVN0YXRlKHRoaXMuYXBwU3RhdGUpO1xyXG5cdH07XHJcblxyXG5cdGNoYW5nZVN0YXRlID0gKHN0YXRlOiBQb21vZG9yb0FwcFN0YXRlcyk6IHZvaWQgPT4ge1xyXG5cdFx0dGhpcy5hcHBTdGF0ZSA9IHN0YXRlO1xyXG5cdFx0dGhpcy50aW1lckNvbnRyb2xsZXIucmVzdGFydFRpbWVyKCk7XHJcblx0XHR0aGlzLnNldFRpbWVyQmFzZWRPblN0YXRlKCk7XHJcblx0fTtcclxuXHJcblx0c2V0VGltZXJCYXNlZE9uU3RhdGUgPSAoKTogdm9pZCA9PiB7XHJcblx0XHRzd2l0Y2ggKHRoaXMuYXBwU3RhdGUpIHtcclxuXHRcdFx0Y2FzZSAnUE9NT0RPUk8nOlxyXG5cdFx0XHRcdHRoaXMudGltZXJDb250cm9sbGVyLnNldFRpbWUobWludXRlc1RvU2Vjb25kcyh0aGlzLnBvbW9kb3JvVGltZSkpO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRjYXNlICdTSE9SVF9CUkVBSyc6XHJcblx0XHRcdFx0dGhpcy50aW1lckNvbnRyb2xsZXIuc2V0VGltZShtaW51dGVzVG9TZWNvbmRzKHRoaXMuc2hvcnRCcmVha1RpbWUpKTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0Y2FzZSAnTE9OR19CUkVBSyc6XHJcblx0XHRcdFx0dGhpcy50aW1lckNvbnRyb2xsZXIuc2V0VGltZShtaW51dGVzVG9TZWNvbmRzKHRoaXMubG9uZ0JyZWFrVGltZSkpO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcbmNvbnN0IGFwcFRoZW1lOiBUaGVtZSA9IG5ldyBBcHBUaGVtZSgpO1xyXG5jb25zdCBwb21vZG9yb0FwcDogUG9tb2Rvcm9BcHAgPSBuZXcgUG9tb2Rvcm9BcHAoKTtcclxuXHJcbi8qIGV2ZW50IGxpc3RlbmVycyAqL1xyXG5zZXR0aW5nc1N1Ym1pdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlOiBFdmVudCkgPT4ge1xyXG5cdGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcblx0Y29uc3QgcG9tb2Rvcm9UaW1lID0gTnVtYmVyKHBvbW9kb3JvVGltZUlucHV0LnZhbHVlKTtcclxuXHRjb25zdCBzaG9ydEJyZWFrVGltZSA9IE51bWJlcihzaG9ydEJyZWFrVGltZUlucHV0LnZhbHVlKTtcclxuXHRjb25zdCBsb25nQnJlYWtUaW1lID0gTnVtYmVyKGxvbmdCcmVha1RpbWVJbnB1dC52YWx1ZSk7XHJcblx0Y29uc3QgY2hvc2VuRm9udDogRm9udCA9IGZvbnRSYWRpb0J1dHRvbnMuZmluZChidXR0b24gPT4gYnV0dG9uLmNoZWNrZWQpLnZhbHVlIGFzIEZvbnQ7XHJcblx0Y29uc3QgY2hvc2VuQ29sb3VyOiBDb2xvdXIgPSBjb2xvdXJSYWRpb0J1dHRvbnMuZmluZChidXR0b24gPT4gYnV0dG9uLmNoZWNrZWQpLnZhbHVlIGFzIENvbG91cjtcclxuXHJcblx0cG9tb2Rvcm9BcHAuc2V0VGltZXMocG9tb2Rvcm9UaW1lLCBzaG9ydEJyZWFrVGltZSwgbG9uZ0JyZWFrVGltZSk7XHJcblx0YXBwVGhlbWUudXBkYXRlVGhlbWUoY2hvc2VuRm9udCwgY2hvc2VuQ29sb3VyKTtcclxuXHRjbG9zZU1vZGFsKCk7XHJcbn0pO1xyXG5cclxuc2V0dGluZ3NCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcblx0b3Blbk1vZGFsKCk7XHJcbn0pO1xyXG5cclxuY2xvc2VNb2RhbEJ1dHRvbj8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcblx0Y2xvc2VNb2RhbCgpO1xyXG59KTtcclxuXHJcbnRpbWVTdGF0ZUJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT5cclxuXHRidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZTogRXZlbnQpID0+IHtcclxuXHRcdGNvbnN0IGJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQgPSBlLnRhcmdldCBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuXHRcdGNvbnN0IHN0YXRlOiBQb21vZG9yb0FwcFN0YXRlcyA9IGJ1dHRvbi5kYXRhc2V0LnN0YXRlLnRvVXBwZXJDYXNlKCkgYXMgUG9tb2Rvcm9BcHBTdGF0ZXM7XHJcblx0XHRhY3RpdmF0ZVN0YXRlQnV0dG9uKGJ1dHRvbik7XHJcblx0XHRwb21vZG9yb0FwcC5jaGFuZ2VTdGF0ZShzdGF0ZSk7XHJcblx0fSlcclxuKTtcclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZTogS2V5Ym9hcmRFdmVudCkgPT4ge1xyXG5cdGNvbnN0IGlzVGFiOiBib29sZWFuID0gZS5rZXkgPT09ICdUYWInO1xyXG5cclxuXHRpZiAoIWlzVGFiKSByZXR1cm47XHJcblxyXG5cdGlmIChlLnNoaWZ0S2V5ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGNsb3NlTW9kYWxCdXR0b24pIHtcclxuXHRcdHNldHRpbmdzU3VibWl0LmZvY3VzKCk7XHJcblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cclxuXHRpZiAoIWUuc2hpZnRLZXkgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gc2V0dGluZ3NTdWJtaXQpIHtcclxuXHRcdGNsb3NlTW9kYWxCdXR0b24uZm9jdXMoKTtcclxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHR9XHJcbn0pO1xyXG5cclxuLyogaGVscGVyIGZ1bmN0aW9ucyAqL1xyXG4vKiAtLS0gdGltZXIgKi9cclxuZnVuY3Rpb24gbWludXRlc1RvU2Vjb25kcyhtaW51dGVzOiBudW1iZXIpOiBudW1iZXIge1xyXG5cdHJldHVybiBtaW51dGVzICogU0VDT05EU19JTl9NSU5VVEU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldE1pbnV0ZXNGcm9tU2Vjb25kcyhzZWNvbmRzOiBudW1iZXIpOiBudW1iZXIge1xyXG5cdHJldHVybiBNYXRoLmZsb29yKHNlY29uZHMgLyBTRUNPTkRTX0lOX01JTlVURSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFJlbWFpbmluZ1NlY29uZHMoc2Vjb25kczogbnVtYmVyKTogbnVtYmVyIHtcclxuXHRyZXR1cm4gc2Vjb25kcyAlIFNFQ09ORFNfSU5fTUlOVVRFO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRMZWFkaW5nWmVybyh0aW1lOiBudW1iZXIpOiBzdHJpbmcge1xyXG5cdHJldHVybiB0aW1lIDwgMTAgPyBgMCR7dGltZX1gIDogdGltZS50b1N0cmluZygpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmb3JtYXRUaW1lKHNlY29uZHM6IG51bWJlcik6IHN0cmluZyB7XHJcblx0Y29uc3QgbWludXRlcyA9IGdldE1pbnV0ZXNGcm9tU2Vjb25kcyhzZWNvbmRzKTtcclxuXHRjb25zdCByZW1haW5pbmdTZWNvbmRzID0gZ2V0UmVtYWluaW5nU2Vjb25kcyhzZWNvbmRzKTtcclxuXHRyZXR1cm4gYWRkTGVhZGluZ1plcm8obWludXRlcykgKyAnOicgKyBhZGRMZWFkaW5nWmVybyhyZW1haW5pbmdTZWNvbmRzKTtcclxufVxyXG5cclxuLyogLS0tIGFwcCB0aW1lIHN0YXRlIGJ1dHRvbnMgZnVuY3Rpb24gKi9cclxuZnVuY3Rpb24gYWN0aXZhdGVTdGF0ZUJ1dHRvbihidXR0b246IEhUTUxCdXR0b25FbGVtZW50KSB7XHJcblx0dGltZVN0YXRlQnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiBidXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJykpO1xyXG5cdGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcclxufVxyXG5cclxuLyogLS0tIG1vZGFsICovXHJcbmZ1bmN0aW9uIG9wZW5Nb2RhbCgpIHtcclxuXHRzZXR0aW5nc01vZGFsLmRhdGFzZXQub3BlbiA9ICd0cnVlJztcclxuXHRjbG9zZU1vZGFsQnV0dG9uLmZvY3VzKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsb3NlTW9kYWwoKSB7XHJcblx0c2V0dGluZ3NNb2RhbC5kYXRhc2V0Lm9wZW4gPSAnZmFsc2UnO1xyXG5cdHNldHRpbmdzQnV0dG9uLmZvY3VzKCk7XHJcbn1cclxuIl19
